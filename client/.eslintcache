[{"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/index.js":"1","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/reportWebVitals.js":"2","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/loginSlice.js":"3","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/store.js":"4","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/https_requests/requests.js":"5","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavbarHolder.jsx":"6","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogIn.jsx":"7","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/Dashboard.jsx":"8","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/Register.jsx":"9","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedOut.jsx":"10","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedIn.jsx":"11","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/Home.jsx":"12","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/HomeContent.jsx":"13","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/App.jsx":"14","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/PrivateRoute.jsx":"15","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogOut.jsx":"16"},{"size":616,"mtime":1609489492402,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1609141777660,"results":"19","hashOfConfig":"18"},{"size":814,"mtime":1609915798774,"results":"20","hashOfConfig":"18"},{"size":179,"mtime":1609488744349,"results":"21","hashOfConfig":"18"},{"size":140,"mtime":1609777452881,"results":"22","hashOfConfig":"18"},{"size":501,"mtime":1609821719813,"results":"23","hashOfConfig":"18"},{"size":5243,"mtime":1609918706556,"results":"24","hashOfConfig":"18"},{"size":1559,"mtime":1609147470520,"results":"25","hashOfConfig":"18"},{"size":8974,"mtime":1609833808076,"results":"26","hashOfConfig":"18"},{"size":864,"mtime":1609577240331,"results":"27","hashOfConfig":"18"},{"size":1284,"mtime":1609917684414,"results":"28","hashOfConfig":"18"},{"size":618,"mtime":1609827183207,"results":"29","hashOfConfig":"18"},{"size":657,"mtime":1609918404632,"results":"30","hashOfConfig":"18"},{"size":2098,"mtime":1609916843788,"results":"31","hashOfConfig":"18"},{"size":542,"mtime":1609915967766,"results":"32","hashOfConfig":"18"},{"size":806,"mtime":1609920540916,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1ow0t2a",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/index.js",[],["68","69"],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/reportWebVitals.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/loginSlice.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/store.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/https_requests/requests.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavbarHolder.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogIn.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/Dashboard.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/Register.jsx",["70"],"import React, { useState, useCallback } from 'react'\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap'\nimport { Formik, ErrorMessage } from 'formik'\nimport * as Yup from 'yup';\nimport { axiosBase } from '../../https_requests/requests'\nimport debounce from 'lodash.debounce';\n\nfunction Register({ display, setDisplay, changeModal }) {\n    const thisModal = 'register';\n    const otherModal = 'login';\n\n    async function checkExists(username) {\n        try {\n            let check = await axiosBase.put('checkexist', { username });\n            if (check.data.exists) {\n                setUsernameExists(true);\n                setCheckingUsername(false);\n                return true;\n            } else {\n                setUsernameExists(false);\n                setCheckingUsername(false);\n                return false;\n            }\n        } catch (e) {\n            console.log(e.response);\n            setCheckingUsername(false);\n        }\n    }\n    const debouncedCheck = useCallback(debounce((username, err) => checkExists(username, err), 800), []);\n\n    const [checkingUsername, setCheckingUsername] = useState(false);\n    const [usernameExists, setUsernameExists] = useState(false);\n    const initialForm = {\n        username: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        email: \"\",\n        firstname: \"\",\n        lastname: \"\",\n    }\n    const validation = {\n        username: Yup.string().required().min(4),\n        password: Yup.string().required().min(8),\n        confirmPassword: Yup.string().required('passwords must match').oneOf([Yup.ref('password'), null], 'passwords must match'),\n        email: Yup.string().required().email(),\n        firstname: Yup.string().required().min(2),\n        lastname: Yup.string().required().min(2),\n    }\n    async function register(form) {\n        try {\n            let register = await axiosBase.post('register', form);\n            console.log(register)\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    return (\n        <Modal centered size='lg' show={display} onHide={() => setDisplay(thisModal, false)}>\n            <Modal.Header closeButton>\n                <Modal.Title className=\"ml-auto\">Register Account</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Formik initialValues={initialForm} validationSchema={Yup.object(validation)}\n                    onSubmit={(values) => {\n                        register(values);\n                    }} >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                    }) => (\n                        <Row className=\"justify-content-center\">\n                            <Col md={8}>\n                                <Form>\n                                    <Form.Group controlId=\"register.username\">\n                                        <Form.Label>username</Form.Label>\n                                        <Form.Control type=\"text\" name=\"username\" value={values.username} className={`${checkingUsername ? 'is-loading' : ''}`}\n                                            isInvalid={(touched.username && errors.username && !checkingUsername) || usernameExists} isValid={touched.username && !errors.username && !checkingUsername && !usernameExists}\n                                            onChange={e => {\n                                                handleChange(e);\n                                                setUsernameExists(false);\n                                                if (e.target.value.length > 3) {\n                                                    setCheckingUsername(true);\n                                                    debouncedCheck(e.target.value);\n                                                }\n                                            }} onBlur={handleBlur} />\n                                        {!checkingUsername &&\n                                            <ErrorMessage name=\"username\" component=\"div\" className=\"text-danger\" />\n                                        }\n                                        {usernameExists &&\n                                        <div className=\"text-danger\">username already exists</div>}\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.password\">\n                                        <Form.Label>password</Form.Label>\n                                        <Form.Control type=\"password\" name=\"password\" value={values.password}\n                                            isInvalid={touched.password && errors.password} isValid={touched.password && !errors.password}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.confirmPassword\">\n                                        <Form.Label>confirm password</Form.Label>\n                                        <Form.Control type=\"password\" name=\"confirmPassword\" value={values.confirmPassword}\n                                            isInvalid={touched.confirmPassword && errors.confirmPassword} isValid={touched.confirmPassword && !errors.confirmPassword}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.email\">\n                                        <Form.Label>email address</Form.Label>\n                                        <Form.Control type=\"text\" name=\"email\" value={values.email}\n                                            isInvalid={touched.email && errors.email} isValid={touched.email && !errors.email}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"email\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Row>\n                                        <Col>\n                                            <Form.Group controlId=\"register.firstname\">\n                                                <Form.Label>first name</Form.Label>\n                                                <Form.Control type=\"text\" name=\"firstname\" value={values.firstname}\n                                                    isInvalid={touched.firstname && errors.firstname} isValid={touched.firstname && !errors.firstname}\n                                                    onChange={handleChange} onBlur={handleBlur} />\n                                                <ErrorMessage name=\"firstname\" component=\"div\" className=\"text-danger\" />\n                                            </Form.Group>\n                                        </Col>\n                                        <Col>\n                                            <Form.Group controlId=\"register.lastname\">\n                                                <Form.Label>last name</Form.Label>\n                                                <Form.Control type=\"text\" name=\"lastname\" value={values.lastname}\n                                                    isInvalid={touched.lastname && errors.lastname} isValid={touched.lastname && !errors.lastname}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur} />\n                                                <ErrorMessage name=\"lastname\" component=\"div\" className=\"text-danger\" />\n                                            </Form.Group>\n                                        </Col>\n                                    </Form.Row>\n                                </Form>\n                            </Col>\n                            <Col md={8} className=\"my-3\">\n                                <Button variant=\"secondary\" onClick={handleSubmit} disabled={isSubmitting}>\n                                    Register\n                                </Button>\n                            </Col>\n                        </Row>\n                    )}\n                </Formik>\n            </Modal.Body>\n            <Modal.Footer>\n                <div>\n                    Already have an account? Log in <span onClick={() => changeModal(thisModal, otherModal)}>here</span>\n                </div>\n            </Modal.Footer>\n        </Modal >\n    )\n}\n\nexport default Register\n","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedOut.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedIn.jsx",["71"],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/Home.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/HomeContent.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/App.jsx",["72"],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/PrivateRoute.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogOut.jsx",["73","74","75"],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":29,"column":28,"nodeType":"82","endLine":29,"endColumn":39},{"ruleId":"83","severity":1,"message":"84","line":3,"column":10,"nodeType":"82","messageId":"85","endLine":3,"endColumn":16},{"ruleId":"80","severity":1,"message":"86","line":55,"column":6,"nodeType":"87","endLine":55,"endColumn":8,"suggestions":"88"},{"ruleId":"83","severity":1,"message":"89","line":1,"column":17,"nodeType":"82","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"83","severity":1,"message":"90","line":1,"column":27,"nodeType":"82","messageId":"85","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"91","line":5,"column":10,"nodeType":"82","messageId":"85","endLine":5,"endColumn":19},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","no-unused-vars","'Button' is defined but never used.","unusedVar","React Hook useEffect has missing dependencies: 'dispatch' and 'loginState'. Either include them or remove the dependency array.","ArrayExpression",["94"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'axiosBase' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},"Update the dependencies array to be: [dispatch, loginState]",{"range":"97","text":"98"},[1696,1698],"[dispatch, loginState]"]