[{"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/index.js":"1","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/reportWebVitals.js":"2","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/loginSlice.js":"3","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/store.js":"4","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/https_requests/requests.js":"5","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavbarHolder.jsx":"6","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogIn.jsx":"7","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/Dashboard.jsx":"8","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/Register.jsx":"9","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedOut.jsx":"10","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedIn.jsx":"11","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/Home.jsx":"12","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/HomeContent.jsx":"13","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/App.jsx":"14","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/PrivateRoute.jsx":"15"},{"size":616,"mtime":1609489492402,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1609141777660,"results":"18","hashOfConfig":"17"},{"size":814,"mtime":1609915798774,"results":"19","hashOfConfig":"17"},{"size":179,"mtime":1609488744349,"results":"20","hashOfConfig":"17"},{"size":140,"mtime":1609777452881,"results":"21","hashOfConfig":"17"},{"size":501,"mtime":1609821719813,"results":"22","hashOfConfig":"17"},{"size":5215,"mtime":1609915397625,"results":"23","hashOfConfig":"17"},{"size":1559,"mtime":1609147470520,"results":"24","hashOfConfig":"17"},{"size":8974,"mtime":1609833808076,"results":"25","hashOfConfig":"17"},{"size":864,"mtime":1609577240331,"results":"26","hashOfConfig":"17"},{"size":1149,"mtime":1609571471944,"results":"27","hashOfConfig":"17"},{"size":618,"mtime":1609827183207,"results":"28","hashOfConfig":"17"},{"size":174,"mtime":1609823483395,"results":"29","hashOfConfig":"17"},{"size":1991,"mtime":1609915869321,"results":"30","hashOfConfig":"17"},{"size":542,"mtime":1609915967766,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1ow0t2a",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/index.js",[],["65","66"],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/reportWebVitals.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/loginSlice.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/store.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/https_requests/requests.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavbarHolder.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogIn.jsx",["67"],"import React, { useState } from 'react'\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap'\nimport { Formik, ErrorMessage } from 'formik'\nimport * as Yup from 'yup';\nimport { axiosBase } from '../../https_requests/requests'\nimport { Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { successfulLogin } from '../../app/loginSlice'\nimport jwt_decode from \"jwt-decode\";\n\nfunction LogIn({ display, setDisplay, changeModal }) {\n    const dispatch = useDispatch();\n\n    const thisModal = 'login';\n    const otherModal = 'register';\n    const [loggedIn, setLoggedIn] = useState(false)\n    const [loginErr, setLoginErr] = useState(\"\");\n\n    const initialForm = {\n        username: \"\",\n        password: \"\",\n    }\n    const validation = {\n        username: Yup.string().required(),\n        password: Yup.string().required().min(8),\n    }\n    async function login(form) {\n        try {\n            let loginAttempt = await axiosBase.post('/login', form)\n            setLoginErr(\"\")\n            let token = loginAttempt.data.token\n            localStorage.setItem('mjh_user_token', loginAttempt.data.token);\n            let deToken = jwt_decode(token)\n            dispatch(successfulLogin(deToken.data.ref))\n            setLoggedIn(true);\n        } catch (e) {\n            // console.log(e)\n            if (e.response.data.invalid === 'username') {\n                setLoginErr(\"Username does not exist\")\n            }\n            if (e.response.data.invalid === 'password') {\n                setLoginErr(\"Invalid password\")\n            }\n        }\n    }\n    if (loggedIn) { return <Redirect to=\"/dashboard\" /> }\n    return (\n        <Modal centered size='lg' show={display} onHide={() => setDisplay(thisModal, false)}>\n            <Modal.Header closeButton>\n                <Modal.Title className=\"ml-auto\">Log In</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Formik initialValues={initialForm} validationSchema={Yup.object(validation)}\n                    onSubmit={(values) => {\n                        login(values);\n                    }} >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                    }) => (\n                        <Row className=\"justify-content-center\">\n                            <Col md={8}>\n                                <Form>\n                                    {loginErr &&\n                                        <Form.Group controlId=\"err.message\">\n                                            <div className=\"text-danger\"><b>{loginErr}</b></div>\n                                        </Form.Group>\n                                    }\n                                    <Form.Group controlId=\"register.username\">\n                                        <Form.Label>username</Form.Label>\n                                        <Form.Control type=\"text\" name=\"username\" value={values.username}\n                                            isInvalid={touched.username && errors.username} isValid={touched.username && !errors.username}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"username\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.password\">\n                                        <Form.Label>password</Form.Label>\n                                        <Form.Control type=\"password\" name=\"password\" value={values.password}\n                                            isInvalid={touched.password && errors.password} isValid={touched.password && !errors.password}\n                                            onChange={handleChange} onBlur={handleBlur} onKeyDown={(e) => {\n                                                if (e.key === 'Enter') {\n                                                    handleSubmit();\n                                                }\n                                            }} />\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                </Form>\n                            </Col>\n                            <Col md={8} className=\"my-3\">\n                                <Button variant=\"secondary\" type=\"submit\" onClick={handleSubmit} /*disabled={isSubmitting}*/>\n                                    Log In\n                                </Button>\n                            </Col>\n                        </Row>\n                    )}\n                </Formik>\n            </Modal.Body>\n            <Modal.Footer>\n                <div>\n                    Don't have an account? Register one <span onClick={() => changeModal(thisModal, otherModal)}>here</span>\n                </div>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default LogIn\n","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/Dashboard.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/Register.jsx",["68"],"import React, { useState, useCallback } from 'react'\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap'\nimport { Formik, ErrorMessage } from 'formik'\nimport * as Yup from 'yup';\nimport { axiosBase } from '../../https_requests/requests'\nimport debounce from 'lodash.debounce';\n\nfunction Register({ display, setDisplay, changeModal }) {\n    const thisModal = 'register';\n    const otherModal = 'login';\n\n    async function checkExists(username) {\n        try {\n            let check = await axiosBase.put('checkexist', { username });\n            if (check.data.exists) {\n                setUsernameExists(true);\n                setCheckingUsername(false);\n                return true;\n            } else {\n                setUsernameExists(false);\n                setCheckingUsername(false);\n                return false;\n            }\n        } catch (e) {\n            console.log(e.response);\n            setCheckingUsername(false);\n        }\n    }\n    const debouncedCheck = useCallback(debounce((username, err) => checkExists(username, err), 800), []);\n\n    const [checkingUsername, setCheckingUsername] = useState(false);\n    const [usernameExists, setUsernameExists] = useState(false);\n    const initialForm = {\n        username: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        email: \"\",\n        firstname: \"\",\n        lastname: \"\",\n    }\n    const validation = {\n        username: Yup.string().required().min(4),\n        password: Yup.string().required().min(8),\n        confirmPassword: Yup.string().required('passwords must match').oneOf([Yup.ref('password'), null], 'passwords must match'),\n        email: Yup.string().required().email(),\n        firstname: Yup.string().required().min(2),\n        lastname: Yup.string().required().min(2),\n    }\n    async function register(form) {\n        try {\n            let register = await axiosBase.post('register', form);\n            console.log(register)\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    return (\n        <Modal centered size='lg' show={display} onHide={() => setDisplay(thisModal, false)}>\n            <Modal.Header closeButton>\n                <Modal.Title className=\"ml-auto\">Register Account</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Formik initialValues={initialForm} validationSchema={Yup.object(validation)}\n                    onSubmit={(values) => {\n                        register(values);\n                    }} >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                    }) => (\n                        <Row className=\"justify-content-center\">\n                            <Col md={8}>\n                                <Form>\n                                    <Form.Group controlId=\"register.username\">\n                                        <Form.Label>username</Form.Label>\n                                        <Form.Control type=\"text\" name=\"username\" value={values.username} className={`${checkingUsername ? 'is-loading' : ''}`}\n                                            isInvalid={(touched.username && errors.username && !checkingUsername) || usernameExists} isValid={touched.username && !errors.username && !checkingUsername && !usernameExists}\n                                            onChange={e => {\n                                                handleChange(e);\n                                                setUsernameExists(false);\n                                                if (e.target.value.length > 3) {\n                                                    setCheckingUsername(true);\n                                                    debouncedCheck(e.target.value);\n                                                }\n                                            }} onBlur={handleBlur} />\n                                        {!checkingUsername &&\n                                            <ErrorMessage name=\"username\" component=\"div\" className=\"text-danger\" />\n                                        }\n                                        {usernameExists &&\n                                        <div className=\"text-danger\">username already exists</div>}\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.password\">\n                                        <Form.Label>password</Form.Label>\n                                        <Form.Control type=\"password\" name=\"password\" value={values.password}\n                                            isInvalid={touched.password && errors.password} isValid={touched.password && !errors.password}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.confirmPassword\">\n                                        <Form.Label>confirm password</Form.Label>\n                                        <Form.Control type=\"password\" name=\"confirmPassword\" value={values.confirmPassword}\n                                            isInvalid={touched.confirmPassword && errors.confirmPassword} isValid={touched.confirmPassword && !errors.confirmPassword}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.email\">\n                                        <Form.Label>email address</Form.Label>\n                                        <Form.Control type=\"text\" name=\"email\" value={values.email}\n                                            isInvalid={touched.email && errors.email} isValid={touched.email && !errors.email}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"email\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Row>\n                                        <Col>\n                                            <Form.Group controlId=\"register.firstname\">\n                                                <Form.Label>first name</Form.Label>\n                                                <Form.Control type=\"text\" name=\"firstname\" value={values.firstname}\n                                                    isInvalid={touched.firstname && errors.firstname} isValid={touched.firstname && !errors.firstname}\n                                                    onChange={handleChange} onBlur={handleBlur} />\n                                                <ErrorMessage name=\"firstname\" component=\"div\" className=\"text-danger\" />\n                                            </Form.Group>\n                                        </Col>\n                                        <Col>\n                                            <Form.Group controlId=\"register.lastname\">\n                                                <Form.Label>last name</Form.Label>\n                                                <Form.Control type=\"text\" name=\"lastname\" value={values.lastname}\n                                                    isInvalid={touched.lastname && errors.lastname} isValid={touched.lastname && !errors.lastname}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur} />\n                                                <ErrorMessage name=\"lastname\" component=\"div\" className=\"text-danger\" />\n                                            </Form.Group>\n                                        </Col>\n                                    </Form.Row>\n                                </Form>\n                            </Col>\n                            <Col md={8} className=\"my-3\">\n                                <Button variant=\"secondary\" onClick={handleSubmit} disabled={isSubmitting}>\n                                    Register\n                                </Button>\n                            </Col>\n                        </Row>\n                    )}\n                </Formik>\n            </Modal.Body>\n            <Modal.Footer>\n                <div>\n                    Already have an account? Log in <span onClick={() => changeModal(thisModal, otherModal)}>here</span>\n                </div>\n            </Modal.Footer>\n        </Modal >\n    )\n}\n\nexport default Register\n","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedOut.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedIn.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/Home.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/HomeContent.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/App.jsx",["69"],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/PrivateRoute.jsx",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":7,"column":10,"nodeType":"76","messageId":"77","endLine":7,"endColumn":21},{"ruleId":"78","severity":1,"message":"79","line":29,"column":28,"nodeType":"76","endLine":29,"endColumn":39},{"ruleId":"78","severity":1,"message":"80","line":54,"column":6,"nodeType":"81","endLine":54,"endColumn":8,"suggestions":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has missing dependencies: 'dispatch' and 'loginState'. Either include them or remove the dependency array.","ArrayExpression",["85"],"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},"Update the dependencies array to be: [dispatch, loginState]",{"range":"88","text":"89"},[1646,1648],"[dispatch, loginState]"]