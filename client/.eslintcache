[{"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/index.js":"1","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/reportWebVitals.js":"2","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/loginSlice.js":"3","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/store.js":"4","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/https_requests/requests.js":"5","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavbarHolder.jsx":"6","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogIn.jsx":"7","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/Dashboard.jsx":"8","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/Register.jsx":"9","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedOut.jsx":"10","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedIn.jsx":"11","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/Home.jsx":"12","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/HomeContent.jsx":"13","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/App.jsx":"14","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/PrivateRoute.jsx":"15","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogOut.jsx":"16","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/userDetailSlice.js":"17","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/SideBar.jsx":"18","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/huntSlice.js":"19"},{"size":616,"mtime":1609489492402,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1609141777660,"results":"22","hashOfConfig":"21"},{"size":814,"mtime":1609915798774,"results":"23","hashOfConfig":"21"},{"size":340,"mtime":1609931314494,"results":"24","hashOfConfig":"21"},{"size":140,"mtime":1609777452881,"results":"25","hashOfConfig":"21"},{"size":501,"mtime":1609821719813,"results":"26","hashOfConfig":"21"},{"size":5450,"mtime":1609927160086,"results":"27","hashOfConfig":"21"},{"size":2887,"mtime":1609928321720,"results":"28","hashOfConfig":"21"},{"size":11757,"mtime":1609929876554,"results":"29","hashOfConfig":"21"},{"size":864,"mtime":1609577240331,"results":"30","hashOfConfig":"21"},{"size":1235,"mtime":1609928229975,"results":"31","hashOfConfig":"21"},{"size":618,"mtime":1609827183207,"results":"32","hashOfConfig":"21"},{"size":657,"mtime":1609918404632,"results":"33","hashOfConfig":"21"},{"size":2116,"mtime":1609927675573,"results":"34","hashOfConfig":"21"},{"size":542,"mtime":1609915967766,"results":"35","hashOfConfig":"21"},{"size":840,"mtime":1609927706901,"results":"36","hashOfConfig":"21"},{"size":1013,"mtime":1609927115581,"results":"37","hashOfConfig":"21"},{"size":278,"mtime":1609928373013,"results":"38","hashOfConfig":"21"},{"size":813,"mtime":1609931196628,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1ow0t2a",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/index.js",[],["84","85"],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/reportWebVitals.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/loginSlice.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/store.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/https_requests/requests.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavbarHolder.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogIn.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/Dashboard.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/Register.jsx",["86"],"import React, { useState, useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Redirect } from 'react-router-dom';\nimport { successfulLogin } from '../../app/loginSlice'\nimport { storeUser } from '../../app/userDetailSlice'\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap'\nimport { Formik, ErrorMessage } from 'formik'\nimport * as Yup from 'yup';\nimport { axiosBase } from '../../https_requests/requests'\nimport debounce from 'lodash.debounce';\nimport jwt_decode from \"jwt-decode\";\n\nfunction Register({ display, setDisplay, changeModal }) {\n    const dispatch = useDispatch();\n    const thisModal = 'register';\n    const otherModal = 'login';\n    const [loggedIn, setLoggedIn] = useState(false)\n    const [checkingExists, setCheckingExists] = useState({ username: false, email: false });\n    const [exists, setExists] = useState({ username: false, email: false });\n\n    async function checkExists(data, type) {\n        try {\n            let check = await axiosBase.put('checkexist', { data, type });\n            if (check.data.exists) {\n                setExists({ ...exists, [type]: true, });\n\n                setCheckingExists({ ...checkingExists, [type]: true, });\n                return true;\n            } else {\n                setExists({ ...exists, [type]: false, });\n                setCheckingExists({ ...checkingExists, [type]: false, });\n                return false;\n            }\n        } catch (e) {\n            console.log(e.response);\n            setCheckingExists({ ...exists, [type]: false, });\n        }\n    }\n    const debouncedCheck = useCallback(debounce((username, type) => checkExists(username, type), 800), []);\n\n    const initialForm = {\n        username: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        email: \"\",\n        firstname: \"\",\n        lastname: \"\",\n    }\n    const validation = {\n        username: Yup.string().required().min(4),\n        password: Yup.string().required().min(8),\n        confirmPassword: Yup.string().required('passwords must match').oneOf([Yup.ref('password'), null], 'passwords must match'),\n        email: Yup.string().required().email(),\n        firstname: Yup.string().required().min(2),\n        lastname: Yup.string().required().min(2),\n    }\n    async function login(form, setSubmitting) {\n        try {\n            let loginAttempt = await axiosBase.post('/login', form)\n            let token = loginAttempt.data.token\n            localStorage.setItem('mjh_user_token', token);\n            let deToken = jwt_decode(token)\n\n            dispatch(storeUser(loginAttempt.data.user))\n            dispatch(successfulLogin(deToken.data.ref))\n\n            setDisplay(thisModal, false)\n            setSubmitting(false);\n            setLoggedIn(true);\n        } catch (e) {\n        }\n    }\n    async function register(form, setSubmitting) {\n        try {\n            await axiosBase.post('register', form);\n            login(form, setSubmitting);\n        } catch (e) {\n            console.log(e.response)\n        }\n    }\n\n    if (loggedIn) { return <Redirect to=\"/dashboard\" /> }\n    return (\n        <Modal centered size='lg' show={display} onHide={() => setDisplay(thisModal, false)}>\n            <Modal.Header closeButton>\n                <Modal.Title className=\"ml-auto\">Register Account</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Formik initialValues={initialForm} validationSchema={Yup.object(validation)}\n                    onSubmit={(values, { setSubmitting }) => {\n                        register(values, setSubmitting);\n                    }} >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                    }) => (\n                        <Row className=\"justify-content-center\">\n                            <Col md={8}>\n                                <Form>\n                                    <Form.Group controlId=\"register.username\">\n                                        <Form.Label>username</Form.Label>\n                                        <Form.Control type=\"text\" name=\"username\" value={values.username} className={`${checkingExists.username ? 'is-loading' : ''}`}\n                                            isInvalid={(touched.username && errors.username && !checkingExists.username) || exists.username} isValid={touched.username && !errors.username && !checkingExists.username && !exists.username}\n                                            onChange={e => {\n                                                handleChange(e);\n                                                setExists({\n                                                    ...exists,\n                                                    username: false,\n                                                });\n                                                if (e.target.value.length > 3) {\n                                                    setCheckingExists({\n                                                        ...checkingExists,\n                                                        username: true,\n                                                    })\n                                                    debouncedCheck(e.target.value, 'username');\n                                                }\n                                            }} onBlur={handleBlur} />\n                                        {!checkingExists.username &&\n                                            <ErrorMessage name=\"username\" component=\"div\" className=\"text-danger\" />\n                                        }\n                                        {exists.username &&\n                                            <div className=\"text-danger\">username already exists</div>}\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.password\">\n                                        <Form.Label>password</Form.Label>\n                                        <Form.Control type=\"password\" name=\"password\" value={values.password}\n                                            isInvalid={touched.password && errors.password} isValid={touched.password && !errors.password}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.confirmPassword\">\n                                        <Form.Label>confirm password</Form.Label>\n                                        <Form.Control type=\"password\" name=\"confirmPassword\" value={values.confirmPassword}\n                                            isInvalid={touched.confirmPassword && errors.confirmPassword} isValid={touched.confirmPassword && !errors.confirmPassword}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.email\">\n                                        <Form.Label>email address</Form.Label>\n                                        <Form.Control type=\"text\" name=\"email\" value={values.email} className={`${checkingExists.username ? 'is-loading' : ''}`}\n                                            isInvalid={(touched.email && errors.email && !checkingExists.email) || exists.email} isValid={touched.email && !errors.email && !checkingExists.email && !exists.email}\n                                            onChange={e => {\n                                                handleChange(e);\n                                                setExists({\n                                                    ...exists,\n                                                    email: false,\n                                                });\n                                                if (e.target.value.length > 3) {\n                                                    setCheckingExists({\n                                                        ...checkingExists,\n                                                        email: true,\n                                                    })\n                                                    debouncedCheck(e.target.value, 'email');\n                                                }\n                                            }} onBlur={handleBlur} />\n                                        {!checkingExists.email &&\n                                            <ErrorMessage name=\"email\" component=\"div\" className=\"text-danger\" />\n                                        }\n                                        {exists.email &&\n                                            <div className=\"text-danger\">email already exists</div>}\n                                    </Form.Group>\n                                    <Form.Row>\n                                        <Col>\n                                            <Form.Group controlId=\"register.firstname\">\n                                                <Form.Label>first name</Form.Label>\n                                                <Form.Control type=\"text\" name=\"firstname\" value={values.firstname}\n                                                    isInvalid={touched.firstname && errors.firstname} isValid={touched.firstname && !errors.firstname}\n                                                    onChange={handleChange} onBlur={handleBlur} />\n                                                <ErrorMessage name=\"firstname\" component=\"div\" className=\"text-danger\" />\n                                            </Form.Group>\n                                        </Col>\n                                        <Col>\n                                            <Form.Group controlId=\"register.lastname\">\n                                                <Form.Label>last name</Form.Label>\n                                                <Form.Control type=\"text\" name=\"lastname\" value={values.lastname}\n                                                    isInvalid={touched.lastname && errors.lastname} isValid={touched.lastname && !errors.lastname}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur} />\n                                                <ErrorMessage name=\"lastname\" component=\"div\" className=\"text-danger\" />\n                                            </Form.Group>\n                                        </Col>\n                                    </Form.Row>\n                                </Form>\n                            </Col>\n                            <Col md={8} className=\"my-3\">\n                                <Button variant=\"secondary\" onClick={handleSubmit} disabled={isSubmitting}>\n                                    Register\n                                </Button>\n                            </Col>\n                        </Row>\n                    )}\n                </Formik>\n            </Modal.Body>\n            <Modal.Footer>\n                <div>\n                    Already have an account? Log in <span onClick={() => changeModal(thisModal, otherModal)}>here</span>\n                </div>\n            </Modal.Footer>\n        </Modal >\n    )\n}\n\nexport default Register\n","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedOut.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedIn.jsx",["87","88"],"import React from 'react'\nimport { NavLink } from 'react-router-dom';\nimport { Button, Nav, Navbar, NavDropdown } from 'react-bootstrap'\n\n\nfunction NavBarLoggedIn() {\n\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"#home\">My Job Hunt</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                    <Nav.Link href=\"#home\">My Account</Nav.Link>\n                    {/* <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n                        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n                    </NavDropdown> */}\n                    <NavLink to='/logout' className=\"btn mx-2\" >Log Out</NavLink>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    )\n}\n\nexport default NavBarLoggedIn\n","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/Home.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/HomeContent.jsx",[],["89","90"],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/App.jsx",["91","92"],"import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport { axiosBase } from './https_requests/requests'\nimport jwtDecode from 'jwt-decode';\n\nimport { successfulLogin, checkedLoginStatus, checkLogin } from './app/loginSlice'\nimport { storeUser } from './app/userDetailSlice'\n\nimport NavbarHolder from './components/NavBar/NavbarHolder';\nimport Home from './components/Home/Home';\nimport Dashboard from './components/dashboard/Dashboard';\nimport PrivateRoute from './components/PrivateRoute';\nimport LogOut from './components/Account/LogOut';\n\nfunction App() {\n  const loginState = useSelector(checkLogin)\n  const dispatch = useDispatch();\n\n\n  const [login, setLogin] = useState(false)\n  const [register, setRegister] = useState(false)\n\n  function modalSetting(modal, turnOn) {\n    if (modal === 'login') {\n      setLogin(turnOn);\n    } else {\n      setRegister(turnOn);\n    }\n  }\n\n  useEffect(() => {\n    console.log('app useeffect')\n    async function checkToken(token) {\n      try {\n        let check = await axiosBase.get('verify_token', {\n          headers: {\n            token: token,\n          }\n        })\n        let deToken = jwtDecode(token);\n        dispatch(storeUser(check.data.user))\n        dispatch(successfulLogin(deToken.data.ref));\n      } catch (e) {\n        // console.log(e.response)\n        if (e.response.data.invalid === 'expired' || e.response.data.invalid === 'invalid') {\n          localStorage.removeItem('mjh_user_token')\n          dispatch(checkedLoginStatus());\n        }\n      }\n    }\n\n    let token = localStorage.getItem('mjh_user_token');\n    if (token) {\n      checkToken(token);\n    }\n  }, [])\n\n  return (\n    <BrowserRouter>\n      <NavbarHolder modalSetting={modalSetting} />\n      <Route exact path=\"/\">\n        <Home login={login} register={register} setDisplay={modalSetting} />\n      </Route>\n\n      <PrivateRoute path=\"/dashboard\" component={Dashboard} />\n      <PrivateRoute path=\"/logout\" component={LogOut} />\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/PrivateRoute.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogOut.jsx",["93","94","95"],"import React, { useState, useEffect } from 'react'\nimport { Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch, batch } from 'react-redux'\nimport { successfulLogout, checkLogin } from '../../app/loginSlice'\nimport { logoutUser } from '../../app/userDetailSlice'\n\nfunction LogOut() {\n    const loginState = useSelector(checkLogin);\n    const dispatch = useDispatch();\n    localStorage.removeItem('mjh_user_token');\n\n    if (!loginState.login) {\n        return <Redirect to=\"/\" />\n    }\n    setTimeout(() => {\n        dispatch(logoutUser())\n        dispatch(successfulLogout());\n    }, 1700);\n\n    return (\n        <div>\n            {!loginState.login ?\n                <>Log Out Successful, redirecting you to home page</> :\n                <>Logging you out</>\n            }\n        </div>\n    )\n}\n\nexport default LogOut\n","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/userDetailSlice.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/SideBar.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/huntSlice.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":39,"column":28,"nodeType":"102","endLine":39,"endColumn":39},{"ruleId":"103","severity":1,"message":"104","line":3,"column":10,"nodeType":"102","messageId":"105","endLine":3,"endColumn":16},{"ruleId":"103","severity":1,"message":"106","line":3,"column":31,"nodeType":"102","messageId":"105","endLine":3,"endColumn":42},{"ruleId":"96","replacedBy":"107"},{"ruleId":"98","replacedBy":"108"},{"ruleId":"103","severity":1,"message":"109","line":17,"column":9,"nodeType":"102","messageId":"105","endLine":17,"endColumn":19},{"ruleId":"100","severity":1,"message":"110","line":57,"column":6,"nodeType":"111","endLine":57,"endColumn":8,"suggestions":"112"},{"ruleId":"103","severity":1,"message":"113","line":1,"column":17,"nodeType":"102","messageId":"105","endLine":1,"endColumn":25},{"ruleId":"103","severity":1,"message":"114","line":1,"column":27,"nodeType":"102","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"103","severity":1,"message":"115","line":3,"column":36,"nodeType":"102","messageId":"105","endLine":3,"endColumn":41},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","no-unused-vars","'Button' is defined but never used.","unusedVar","'NavDropdown' is defined but never used.",["116"],["117"],"'loginState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["118"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'batch' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},"Update the dependencies array to be: [dispatch]",{"range":"121","text":"122"},[1740,1742],"[dispatch]"]