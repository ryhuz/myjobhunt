[{"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/index.js":"1","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/reportWebVitals.js":"2","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/loginSlice.js":"3","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/store.js":"4","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/https_requests/requests.js":"5","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavbarHolder.jsx":"6","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogIn.jsx":"7","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/Dashboard.jsx":"8","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/Register.jsx":"9","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedOut.jsx":"10","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedIn.jsx":"11","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/Home.jsx":"12","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/HomeContent.jsx":"13","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/App.jsx":"14","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/PrivateRoute.jsx":"15","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogOut.jsx":"16","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/userDetailSlice.js":"17","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/SideBar.jsx":"18","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/huntSlice.js":"19","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LoginFunctions.js":"20","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/NewHunt.jsx":"21","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Hunts/Hunt.jsx":"22","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Hunts/NewJob.jsx":"23"},{"size":616,"mtime":1609489492402,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1609141777660,"results":"26","hashOfConfig":"25"},{"size":814,"mtime":1609915798774,"results":"27","hashOfConfig":"25"},{"size":340,"mtime":1609931314494,"results":"28","hashOfConfig":"25"},{"size":327,"mtime":1610001433213,"results":"29","hashOfConfig":"25"},{"size":501,"mtime":1609821719813,"results":"30","hashOfConfig":"25"},{"size":5910,"mtime":1610005637997,"results":"31","hashOfConfig":"25"},{"size":5515,"mtime":1610261222636,"results":"32","hashOfConfig":"25"},{"size":12412,"mtime":1610003929524,"results":"33","hashOfConfig":"25"},{"size":864,"mtime":1609577240331,"results":"34","hashOfConfig":"25"},{"size":1297,"mtime":1610007837840,"results":"35","hashOfConfig":"25"},{"size":618,"mtime":1609827183207,"results":"36","hashOfConfig":"25"},{"size":657,"mtime":1609918404632,"results":"37","hashOfConfig":"25"},{"size":2468,"mtime":1610257438084,"results":"38","hashOfConfig":"25"},{"size":544,"mtime":1610002552125,"results":"39","hashOfConfig":"25"},{"size":808,"mtime":1609999859547,"results":"40","hashOfConfig":"25"},{"size":1231,"mtime":1610039362625,"results":"41","hashOfConfig":"25"},{"size":278,"mtime":1609928373013,"results":"42","hashOfConfig":"25"},{"size":803,"mtime":1610260931757,"results":"43","hashOfConfig":"25"},{"size":1774,"mtime":1610015177731,"results":"44","hashOfConfig":"25"},{"size":6065,"mtime":1610261541020,"results":"45","hashOfConfig":"25"},{"size":3894,"mtime":1610261585781,"results":"46","hashOfConfig":"25"},{"size":5442,"mtime":1610262178672,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1ow0t2a",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/index.js",[],["97","98"],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/reportWebVitals.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/loginSlice.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/store.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/https_requests/requests.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavbarHolder.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogIn.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/Dashboard.jsx",["99"],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/Register.jsx",["100"],"import React, { useState, useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Redirect } from 'react-router-dom';\nimport { successfulLogin } from '../../app/loginSlice'\nimport { storeUser } from '../../app/userDetailSlice'\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap'\nimport { Formik, ErrorMessage } from 'formik'\nimport * as Yup from 'yup';\nimport debounce from 'lodash.debounce';\nimport { register, login } from './LoginFunctions';\nimport { axiosBase } from '../../https_requests/requests'\n\nfunction Register({ display, setDisplay, changeModal }) {\n    const dispatch = useDispatch();\n    const thisModal = 'register';\n    const otherModal = 'login';\n    const [loggedIn, setLoggedIn] = useState(false)\n    const [checkingExists, setCheckingExists] = useState({ username: false, email: false });\n    const [exists, setExists] = useState({ username: false, email: false });\n\n    async function checkExists(data, type) {\n        try {\n            let check = await axiosBase.put('checkexist', { data, type });\n            if (check.data.exists) {\n                setExists({ ...exists, [type]: true, });\n\n                setCheckingExists({ ...checkingExists, [type]: true, });\n                return true;\n            } else {\n                setExists({ ...exists, [type]: false, });\n                setCheckingExists({ ...checkingExists, [type]: false, });\n                return false;\n            }\n        } catch (e) {\n            console.log(e.response);\n            setCheckingExists({ ...exists, [type]: false, });\n        }\n    }\n    const debouncedCheck = useCallback(debounce((username, type) => checkExists(username, type), 800), []);\n\n    const initialForm = {\n        username: \"\",\n        password: \"\",\n        confirmPassword: \"\",\n        email: \"\",\n        firstname: \"\",\n        lastname: \"\",\n    }\n    const validation = {\n        username: Yup.string().required().min(4),\n        password: Yup.string().required().min(8),\n        confirmPassword: Yup.string().required('passwords must match').oneOf([Yup.ref('password'), null], 'passwords must match'),\n        email: Yup.string().required().email(),\n        firstname: Yup.string().required().min(2),\n        lastname: Yup.string().required().min(2),\n    }\n\n    function handleRegister(form, setSubmitting) {\n        register(form)\n            .then(attemptRegister => {\n                if (attemptRegister.success) {\n                    login(form)\n                        .then(attemptLogin => {\n                            if (attemptLogin.success) {\n                                /* Update store with user details and token */\n                                dispatch(storeUser(attemptLogin.user))\n                                dispatch(successfulLogin(attemptLogin.token))\n\n                                /* Reset register modal form */\n                                setSubmitting(false);\n                                setDisplay(thisModal, false)\n\n                                /* Redirect to dashboard */\n                                setLoggedIn(true);\n                            } else {\n                                /* Login failed */\n                                setSubmitting(false);\n                            }\n                        })\n                        .catch(e => {\n                            console.log(e)\n                        })\n                } else {\n                    /* Whatever if registration failed */\n                    // setSubmitting(false)\n                    // show error message\n                }\n            })\n            .catch(e => {\n                console.log(e)\n            })\n    }\n\n    if (loggedIn) { return <Redirect to=\"/dashboard\" /> }\n    return (\n        <Modal centered size='lg' show={display} onHide={() => setDisplay(thisModal, false)}>\n            <Modal.Header closeButton>\n                <Modal.Title className=\"ml-auto\">Register Account</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Formik initialValues={initialForm} validationSchema={Yup.object(validation)}\n                    onSubmit={(values, { setSubmitting }) => {\n                        handleRegister(values, setSubmitting);\n                    }} >\n                    {({\n                        values,\n                        errors,\n                        touched,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                    }) => (\n                        <Row className=\"justify-content-center\">\n                            <Col md={8}>\n                                <Form>\n                                    <Form.Group controlId=\"register.username\">\n                                        <Form.Label>username</Form.Label>\n                                        <Form.Control type=\"text\" name=\"username\" value={values.username} className={`${checkingExists.username ? 'is-loading' : ''}`}\n                                            isInvalid={(touched.username && errors.username && !checkingExists.username) || exists.username} isValid={touched.username && !errors.username && !checkingExists.username && !exists.username}\n                                            onChange={e => {\n                                                handleChange(e);\n                                                setExists({\n                                                    ...exists,\n                                                    username: false,\n                                                });\n                                                if (e.target.value.length > 3) {\n                                                    setCheckingExists({\n                                                        ...checkingExists,\n                                                        username: true,\n                                                    })\n                                                    debouncedCheck(e.target.value, 'username');\n                                                }\n                                            }} onBlur={handleBlur} />\n                                        {!checkingExists.username &&\n                                            <ErrorMessage name=\"username\" component=\"div\" className=\"text-danger\" />\n                                        }\n                                        {exists.username &&\n                                            <div className=\"text-danger\">username already exists</div>}\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.password\">\n                                        <Form.Label>password</Form.Label>\n                                        <Form.Control type=\"password\" name=\"password\" value={values.password}\n                                            isInvalid={touched.password && errors.password} isValid={touched.password && !errors.password}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"password\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.confirmPassword\">\n                                        <Form.Label>confirm password</Form.Label>\n                                        <Form.Control type=\"password\" name=\"confirmPassword\" value={values.confirmPassword}\n                                            isInvalid={touched.confirmPassword && errors.confirmPassword} isValid={touched.confirmPassword && !errors.confirmPassword}\n                                            onChange={handleChange} onBlur={handleBlur} />\n                                        <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"text-danger\" />\n                                    </Form.Group>\n                                    <Form.Group controlId=\"register.email\">\n                                        <Form.Label>email address</Form.Label>\n                                        <Form.Control type=\"text\" name=\"email\" value={values.email} className={`${checkingExists.username ? 'is-loading' : ''}`}\n                                            isInvalid={(touched.email && errors.email && !checkingExists.email) || exists.email} isValid={touched.email && !errors.email && !checkingExists.email && !exists.email}\n                                            onChange={e => {\n                                                handleChange(e);\n                                                setExists({\n                                                    ...exists,\n                                                    email: false,\n                                                });\n                                                if (e.target.value.length > 3) {\n                                                    setCheckingExists({\n                                                        ...checkingExists,\n                                                        email: true,\n                                                    })\n                                                    debouncedCheck(e.target.value, 'email');\n                                                }\n                                            }} onBlur={handleBlur} />\n                                        {!checkingExists.email &&\n                                            <ErrorMessage name=\"email\" component=\"div\" className=\"text-danger\" />\n                                        }\n                                        {exists.email &&\n                                            <div className=\"text-danger\">email already exists</div>}\n                                    </Form.Group>\n                                    <Form.Row>\n                                        <Col>\n                                            <Form.Group controlId=\"register.firstname\">\n                                                <Form.Label>first name</Form.Label>\n                                                <Form.Control type=\"text\" name=\"firstname\" value={values.firstname}\n                                                    isInvalid={touched.firstname && errors.firstname} isValid={touched.firstname && !errors.firstname}\n                                                    onChange={handleChange} onBlur={handleBlur} />\n                                                <ErrorMessage name=\"firstname\" component=\"div\" className=\"text-danger\" />\n                                            </Form.Group>\n                                        </Col>\n                                        <Col>\n                                            <Form.Group controlId=\"register.lastname\">\n                                                <Form.Label>last name</Form.Label>\n                                                <Form.Control type=\"text\" name=\"lastname\" value={values.lastname}\n                                                    isInvalid={touched.lastname && errors.lastname} isValid={touched.lastname && !errors.lastname}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur} />\n                                                <ErrorMessage name=\"lastname\" component=\"div\" className=\"text-danger\" />\n                                            </Form.Group>\n                                        </Col>\n                                    </Form.Row>\n                                </Form>\n                            </Col>\n                            <Col md={8} className=\"my-3\">\n                                <Button variant=\"secondary\" onClick={handleSubmit} disabled={isSubmitting}>\n                                    Register\n                                </Button>\n                            </Col>\n                        </Row>\n                    )}\n                </Formik>\n            </Modal.Body>\n            <Modal.Footer>\n                <div>\n                    Already have an account? Log in <span onClick={() => changeModal(thisModal, otherModal)}>here</span>\n                </div>\n            </Modal.Footer>\n        </Modal >\n    )\n}\n\nexport default Register\n","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedOut.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/NavBar/NavBarLoggedIn.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/Home.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Home/HomeContent.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/App.jsx",["101"],"import React, { useState, useEffect } from 'react'\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport { useDispatch } from 'react-redux'\nimport { checkToken, getUserJobData } from './components/Account/LoginFunctions'\nimport { successfulLogin, checkedLoginStatus } from './app/loginSlice'\nimport { storeUser } from './app/userDetailSlice'\nimport { storeHunts, storeJobApps } from './app/huntSlice';\n\nimport NavbarHolder from './components/NavBar/NavbarHolder';\nimport Home from './components/Home/Home';\nimport Dashboard from './components/dashboard/Dashboard';\nimport PrivateRoute from './components/PrivateRoute';\nimport LogOut from './components/Account/LogOut';\nimport Hunt from './components/Hunts/Hunt';\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [login, setLogin] = useState(false)\n  const [register, setRegister] = useState(false)\n\n  function modalSetting(modal, turnOn) {\n    if (modal === 'login') {\n      setLogin(turnOn);\n    } else {\n      setRegister(turnOn);\n    }\n  }\n\n  useEffect(() => {\n    console.log('app useeffect')\n\n    let token = localStorage.getItem('mjh_user_token');\n    if (token) {\n      checkToken(token)\n        .then(tokenVerify => {\n          if (tokenVerify.success) {\n            /* Update store with user details and token */\n            dispatch(storeUser(tokenVerify.user));\n            dispatch(successfulLogin(tokenVerify.token));\n\n            /* Get user job data and update store */\n            getUserJobData()\n              .then(userJobsData => {\n                dispatch(storeHunts(userJobsData.hunts));\n                dispatch(storeJobApps(userJobsData.jobs));\n              })\n              .catch(e => {\n                console.log(e);\n              })\n          } else {\n            /* Token invalid */       // want to differenciate between invalid and expired?\n            localStorage.removeItem('mjh_user_token')\n            dispatch(checkedLoginStatus());\n          }\n        })\n        .catch(e => {\n          console.log(e)\n        })\n    }\n  }, [])\n  return (\n    <BrowserRouter>\n      <NavbarHolder modalSetting={modalSetting} />\n      <Route exact path=\"/\">\n        <Home login={login} register={register} setDisplay={modalSetting} />\n      </Route>\n\n      <PrivateRoute path=\"/dashboard\" component={Dashboard} />\n      <PrivateRoute path=\"/hunt/:id\" component={Hunt} />\n      <PrivateRoute path=\"/logout\" component={LogOut} />\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/PrivateRoute.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LogOut.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/userDetailSlice.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/SideBar.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/app/huntSlice.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Account/LoginFunctions.js",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/dashboard/NewHunt.jsx",[],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Hunts/Hunt.jsx",["102"],"/mnt/c/Users/shawn/Documents/My Software/myjobhunt/client/src/components/Hunts/NewJob.jsx",["103","104","105"],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":16},{"ruleId":"114","severity":1,"message":"115","line":39,"column":28,"nodeType":"112","endLine":39,"endColumn":39},{"ruleId":"114","severity":1,"message":"116","line":61,"column":6,"nodeType":"117","endLine":61,"endColumn":8,"suggestions":"118"},{"ruleId":"110","severity":1,"message":"111","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":16},{"ruleId":"110","severity":1,"message":"119","line":5,"column":41,"nodeType":"112","messageId":"113","endLine":5,"endColumn":51},{"ruleId":"110","severity":1,"message":"120","line":8,"column":10,"nodeType":"112","messageId":"113","endLine":8,"endColumn":19},{"ruleId":"110","severity":1,"message":"121","line":11,"column":11,"nodeType":"112","messageId":"113","endLine":11,"endColumn":19},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["124"],"'InputGroup' is defined but never used.","'axiosJobs' is defined but never used.","'dispatch' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},"Update the dependencies array to be: [dispatch]",{"range":"127","text":"128"},[2036,2038],"[dispatch]"]